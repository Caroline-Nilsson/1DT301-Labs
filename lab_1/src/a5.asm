;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
;   1DT301, Computer Technology I
;   Date: 2017-09-04
;   Author:
;                       Caroline Nilsson            (cn222nd)
;                       Daniel Alm GrundstrÃ¶m       (dg222dw)
;
;   Lab number:         1
;   Title:              How to use the PORTs. Digital input /output.
;                       Subroutine call.
;
;   Hardware:           STK600, CPU ATmega2560
;
;   Function:           Repeatedly lights LEDs sequentially right to left.
;                       
;                       I.e:
;                       0000 0001 -> 0000 0010 -> 0000 0100 -> ... ->
;                       1000 0000 -> 0000 0001 -> 0000 0010 -> ...
;
;   Input ports:        N/A
;
;   Output ports:       PORTB
;
;   Subroutines:        delay_500ms - delays execution for 500 ms
;   Included files:     m2560def.inc
;
;   Other information:  Since a subroutine is used, the stack pointer must
;                       be initialized so the processor knows where in the 
;                       code to jump when the subroutine returns. 
;
;   Changes in program: 
;                       2017-09-01:
;                       Implements flowchart design
;
;                       2017-09-04:
;                       Adds header, comments and some minor refactoring
;
;<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
.include "m2560def.inc"
.def dataDir = r16
.def ledState = r17
.def INITIAL_LED_STATE = 0x01

; Initialize SP, Stack Pointer
ldi r20, HIGH(RAMEND)					; R20 = high part of RAMEND address
out SPH,R20								; SPH = high part of RAMEND address
ldi R20, low(RAMEND)					; R20 = low part of RAMEND address
out SPL,R20								; SPL = low part of RAMEND address

; Set PORTB to output
ldi dataDir, 0xFF
out DDRB, dataDir

ldi ledState, INITIAL_LED_STATE         ; Set initial LED state

loop:
	out PORTB, ledOutput                ; Write state to LEDs
	rcall delay_500ms                   ; Delay to make changes visible

	sbic PORTB, PORTB7                  ; If LED7 is lit
	    ldi ledState, INITIAL_LED_STATE ;    then reset LED state to initial

	sbis PORTB, PORTB7                  ; else
	    lsl ledState                    ;    shift LED state to the left 
	rjmp loop

; Generated by delay loop calculator
; at http://www.bretmulvey.com/avrdelay.html
;
; Delay 4 000 000 cycles
; 500ms at 8.0 MHz
delay_500ms:
    ldi  r18, 21
    ldi  r19, 75
    ldi  r21, 191
L1: dec  r21
    brne L1
    dec  r19
    brne L1
    dec  r18
    brne L1
    nop
	ret
