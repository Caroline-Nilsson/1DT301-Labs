;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
;   1DT301, Computer Technology I
;   Date: 2017-09-07
;   Author:
;                       Caroline Nilsson            (cn222nd)
;                       Daniel Alm GrundstrÃ¶m       (dg222dw)
;
;   Lab number:         1
;   Title:              How to use the PORTs. Digital input /output.
;                       Subroutine call.
;
;   Hardware:           STK600, CPU ATmega2560
;
;   Function:           Repeatedly lights LEDs sequentially right to left.
;                       
;                       I.e:
;                       0000 0001 -> 0000 0010 -> 0000 0100 -> ... ->
;                       1000 0000 -> 0000 0001 -> 0000 0010 -> ...
;
;   Input ports:        N/A
;
;   Output ports:       PORTB
;
;   Subroutines:        delay - delays execution
;   Included files:     m2560def.inc
;
;   Other information:  Since a subroutine is used, the stack pointer must
;                       be initialized so the processor knows where in the 
;                       code to jump when the subroutine returns. 
;
;   Changes in program: 
;                       2017-09-01:
;                       Implements flowchart design
;
;                       2017-09-04:
;                       Adds header, comments and some minor refactoring
;
;                       2017-09-07:
;                       Adjusts code to handle pull up resistor on PORTB.
;
;<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
.include "m2560def.inc"
.def dataDir = r16
.def ledState = r17
.equ INITIAL_LED_STATE = 0xFF

; Initialize SP, Stack Pointer
ldi r20, HIGH(RAMEND)                   ; R20 = high part of RAMEND address
out SPH,R20                             ; SPH = high part of RAMEND address
ldi R20, low(RAMEND)                    ; R20 = low part of RAMEND address
out SPL,R20                             ; SPL = low part of RAMEND address

; Set PORTB to output
ldi dataDir, 0xFF
out DDRB, dataDir

ldi ledState, INITIAL_LED_STATE         ; Set initial LED state

loop:
    out PORTB, ledState                 ; Write state to LEDs
    rcall delay                         ; Delay to make changes visible
    rol ledState                        ; Rotate LED state to the left 
    rjmp loop

; Generated by delay loop calculator
; at http://www.bretmulvey.com/avrdelay.html
;
; Delay 500 000 cycles
; 500ms at 1 MHz
delay:
    push r18
	push r19
	push r20
	
    ldi  r18, 3
    ldi  r19, 138
    ldi  r20, 86
L1: dec  r20
    brne L1
    dec  r19
    brne L1
    dec  r18
    brne L1
    rjmp PC+1
	
	pop r20
	pop r19
	pop r18
    ret
